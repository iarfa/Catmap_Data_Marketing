# Librairies
import streamlit as st
import pandas as pd
from page_insee import page_insee
from fonctions_cartographie import recherche_etablissements_osm

# Personnalisation de la page
def personnalisation_page():
    """
    Objectif :
        Personnaliser la page, les couleurs sont personnalisables ici : https://htmlcolorcodes.com/fr/
    """

    st.markdown(
        """
        <style>
            .title {
                color: #1f77b4;
                font-size: 40px;
                font-weight: bold; # Gras
            }
            .header {
                color: #ff7f0e;
                font-size: 30px;
                font-weight: bold;
            }
            .subheader {
                color: #2ca02c;
                font-size: 20px;
            }
            .footer {
                color: #1f77b4;
                font-size: 18px;
            }
        </style>
    """,
        unsafe_allow_html=True,
    )  # Permet d'afficher du html et CSS

# Affichage titre
def affichage_titre():
    """
    Objectif :
        Afficher le titre et la description
    """

    # Titre
    st.title("üåç API √©tude sectorielle et concurrentielle Data Marketing")

    # Description
    st.markdown(
        '<p class="footer">Explorez les donn√©es, analysez les tendances du march√©, et optimisez vos strat√©gies commerciales.</p>',
        unsafe_allow_html=True,
    )
    st.write("Bienvenue dans l'outil de Data Marketing. Choisissez une page dans le menu √† gauche pour commencer.")

# Navigation entre les diff√©rentes pages
def navigation():
    """
    Objectif :
        Afficher un s√©lecteur pour naviguer entre les pages.
    """

    with st.sidebar:
        st.markdown("## üß≠ Navigation")
        page_selectionnee = st.radio(
            label="Choisissez une page :",
            options=["üè† Accueil", "üìä Donn√©es INSEE", "üó∫Ô∏è Donn√©es OSM"],
            index=0
        )

    if "Accueil" in page_selectionnee:
        return "accueil"
    elif "INSEE" in page_selectionnee:
        return "insee"
    elif "OSM" in page_selectionnee:
        return "osm"

# Carte des points OSM
def interface_recherche_osm(df_geo):
    """
    Affiche une interface compl√®te et dynamique pour la recherche d'√©tablissements OSM.

    Cette fonction g√®re la saisie des enseignes, la s√©lection g√©ographique hi√©rarchique
    (R√©gion, D√©partement, Commune), lance la recherche et stocke les r√©sultats
    dans l'√©tat de la session Streamlit.

    Args:
        df_geo (pd.DataFrame): Un DataFrame contenant les donn√©es g√©ographiques
                               avec les colonnes 'Nom_Region', 'Nom_Dep', 'Num_Dep', 'Nom_Ville'.

    Returns:
        pd.DataFrame: Le DataFrame des r√©sultats de la recherche, potentiellement vide.
    """
    st.subheader("Recherche d'√©tablissements via OpenStreetMap")

    # === S√©curit√© : V√©rifier si les donn√©es g√©ographiques sont charg√©es ===
    if df_geo is None or df_geo.empty:
        st.error(
            "Les donn√©es g√©ographiques de r√©f√©rence (communes, d√©partements...) n'ont pas pu √™tre charg√©es. Le module de recherche est indisponible.")
        return pd.DataFrame()

    # =================================================================
    # ## 1. Saisie des noms d'√©tablissements
    # =================================================================
    noms_etablissements_osm = st.text_input(
        "1Ô∏è‚É£ Entrez un ou plusieurs noms d'√©tablissements (s√©par√©s par des virgules)",
        placeholder="Ex: Carrefour, Lidl, Auchan",
        value=st.session_state.get("noms_etablissements_osm", ""),
        help="Vous pouvez rechercher plusieurs enseignes en m√™me temps."
    )
    noms_etablissements = [nom.strip() for nom in noms_etablissements_osm.split(",") if nom.strip()]

    # =================================================================
    # ## 2. S√©lection de la zone g√©ographique
    # =================================================================
    st.markdown("2Ô∏è‚É£ Choisissez la zone de recherche")

    maille_recherche = st.radio(
        "Choisir la maille :",
        ('R√©gion', 'D√©partement', 'Commune'),
        horizontal=True,
        key="maille_osm"
    )

    selection_geo = []  # Cette liste contiendra les noms de R√©gions, D√©partements ou Communes

    # --- Logique d'affichage dynamique des s√©lecteurs ---

    if maille_recherche == 'R√©gion':
        regions_disponibles = sorted(df_geo['Nom_Region'].unique())
        selection_geo = st.multiselect("Choisissez une ou plusieurs r√©gions", regions_disponibles,
                                       key="selection_region_osm")

    elif maille_recherche == 'D√©partement':

        # Convertir la colonne en string pour un tri sans erreur
        df_geo['Num_Dep'] = df_geo['Num_Dep'].astype(str)

        # Cr√©e un DataFrame unique des d√©partements, tri√© par num√©ro
        df_deps = df_geo[['Num_Dep', 'Nom_Dep']].drop_duplicates().sort_values('Num_Dep')

        # Cr√©e les √©tiquettes format√©es "Num√©ro - Nom" pour l'affichage
        df_deps['label'] = df_deps['Num_Dep'].astype(str).str.zfill(2) + " - " + df_deps['Nom_Dep']
        options_deps = df_deps['label'].tolist()

        # Affiche le s√©lecteur avec les √©tiquettes tri√©es
        selection_labels = st.multiselect("Choisissez un ou plusieurs d√©partements", options_deps,
                                          key="selection_dep_osm")

        # Traduit les √©tiquettes s√©lectionn√©es (ex: "01 - Ain") en vrais noms (ex: "Ain") pour le filtrage
        selection_geo = df_deps[df_deps['label'].isin(selection_labels)]['Nom_Dep'].tolist()

    elif maille_recherche == 'Commune':
        # Pour les communes, on filtre d'abord par d√©partement pour une meilleure UX
        st.info("Pour trouver une commune, veuillez d'abord s√©lectionner son d√©partement.")

        df_deps = df_geo[['Num_Dep', 'Nom_Dep']].drop_duplicates().sort_values('Num_Dep')
        df_deps['label'] = df_deps['Num_Dep'].astype(str).str.zfill(2) + " - " + df_deps['Nom_Dep']
        options_deps = df_deps['label'].tolist()

        dep_pour_communes_labels = st.multiselect("D'abord, s√©lectionnez le(s) d√©partement(s)", options_deps,
                                                  key="dep_pour_commune_osm")

        if dep_pour_communes_labels:
            # Traduit les labels en noms de d√©partements
            deps_selectionnes = df_deps[df_deps['label'].isin(dep_pour_communes_labels)]['Nom_Dep'].tolist()

            # Filtre les communes sur la base des d√©partements choisis
            communes_disponibles = sorted(df_geo[df_geo['Nom_Dep'].isin(deps_selectionnes)]['Nom_Ville'].unique())
            selection_geo = st.multiselect("Puis, choisissez une ou plusieurs communes", communes_disponibles,
                                           key="selection_commune_osm")

    # =================================================================
    # ## 3. Bouton de recherche et ex√©cution
    # =================================================================
    if st.button("Lancer la recherche", key="recherche_osm_nouveau", type="primary"):
        # Sauvegarde de l'input utilisateur
        st.session_state["noms_etablissements_osm"] = noms_etablissements_osm

        villes_a_chercher = []
        if selection_geo:
            if maille_recherche == 'R√©gion':
                villes_a_chercher = df_geo[df_geo['Nom_Region'].isin(selection_geo)]['Nom_Ville'].tolist()
            elif maille_recherche == 'D√©partement':
                villes_a_chercher = df_geo[df_geo['Nom_Dep'].isin(selection_geo)]['Nom_Ville'].tolist()
            elif maille_recherche == 'Commune':
                villes_a_chercher = selection_geo  # C'est d√©j√† la liste des communes

        # Lancement de la requ√™te API seulement si les inputs sont valides
        if noms_etablissements and villes_a_chercher:
            with st.spinner(
                    f"Recherche de '{', '.join(noms_etablissements)}' sur {len(villes_a_chercher)} commune(s)..."):
                df_resultats = recherche_etablissements_osm(noms_etablissements, villes_a_chercher)

            # Stockage des r√©sultats dans la session
            st.session_state["df_etablissements_osm"] = df_resultats if df_resultats is not None else pd.DataFrame()
        else:
            st.warning("Veuillez entrer au moins un nom d‚Äô√©tablissement ET s√©lectionner une zone g√©ographique.")
            # On vide les r√©sultats si la recherche est invalide
            st.session_state["df_etablissements_osm"] = pd.DataFrame()

    # =================================================================
    # ## 4. Valeur de retour
    # =================================================================
    # La fonction retourne toujours l'√©tat actuel des r√©sultats stock√©s en session
    return st.session_state.get("df_etablissements_osm", pd.DataFrame())

# Dictionnaire de configuration centralis√© et exhaustif pour tous les indicateurs
INDICATEURS_CONFIG = {
    # --- Indicateurs Cl√©s (une seule vue) ---
    "revenu_median": {
        "display": "Revenu m√©dian (‚Ç¨)",
        "raw": "Revenu_median",
        "pct": None
    },
    "taux_pauvrete": {
        "display": "Taux de pauvret√© (%)",
        "raw": "Taux_pauvrete",
        "pct": None
    },

    # --- D√©mographie (double vue : brut + %) ---
    "population_totale": {
        "display": "Population totale",
        "raw": "Population_totale",
        "pct": None  # Pas de sens d'avoir un % de la population totale
    },
    "pop_15_24": {
        "display": "Population 15-24 ans",
        "raw": "Pop_15_24_ans",
        "pct": "Part_jeunes_15_24_ans_pct"
    },
    "pop_25_54": {
        "display": "Population 25-54 ans",
        "raw": "Pop_25_54_ans",
        "pct": "Part_actifs_25_54_ans_pct"
    },
    "pop_55_79": {
        "display": "Population 55-79 ans",
        "raw": "Pop_55_79_ans",
        "pct": "Part_seniors_55_79_ans_pct"
    },
    "pop_80_plus": {
        "display": "Population 80 ans et plus",
        "raw": "Pop_80_ans_plus",
        "pct": "Part_seniors_80_ans_plus_pct"
    },

    # --- M√©nages (double vue : brut + %) ---
    "menages_total": {
        "display": "Nombre total de m√©nages",
        "raw": "Nb_menages_total",
        "pct": None
    },
    "menages_monoparentaux": {
        "display": "M√©nages monoparentaux",
        "raw": "Menages_monoparental",
        "pct": "Part_menages_monoparentaux_pct"
    },

    # --- CSP (double vue : brut + %) ---
    "agriculteurs": {
        "display": "M√©nages - Agriculteurs (CSP1)",
        "raw": "Menages_agriculteurs_CS1",
        "pct": "Part_agriculteurs_CS1_pct"
    },
    "artisans": {
        "display": "M√©nages - Artisans, commer√ßants (CSP2)",
        "raw": "Menages_artisans_commercants_CS2",
        "pct": "Part_artisans_commercants_CS2_pct"
    },
    "cadres": {
        "display": "M√©nages - Cadres (CSP3)",
        "raw": "Menages_cadres_prof_intelectuelles_CS3",
        "pct": "Part_cadres_CS3_pct"
    },
    "prof_intermediaires": {
        "display": "M√©nages - Prof. interm√©diaires (CSP4)",
        "raw": "Menages_prof_intermediaires_CS4",
        "pct": "Part_prof_intermediaires_CS4_pct"
    },
    "employes": {
        "display": "M√©nages - Employ√©s (CSP5)",
        "raw": "Menages_employes_CS5",
        "pct": "Part_employes_CS5_pct"
    },
    "ouvriers": {
        "display": "M√©nages - Ouvriers (CSP6)",
        "raw": "Menages_ouvriers_CS6",
        "pct": "Part_ouvriers_CS6_pct"
    },
    "retraites": {
        "display": "M√©nages - Retrait√©s (CSP7)",
        "raw": "Menages_retraites_CS7",
        "pct": "Part_retraites_CS7_pct"
    },
    "autres": {
        "display": "M√©nages - Autres sans act. pro. (CSP8)",
        "raw": "Menages_autres_sans_act_pro_CS8",
        "pct": "Part_autres_CS8_pct"
    }
}

# Interface de s√©lection socio
def interface_recherche_osm(df_geo):
    """
    Affiche l'interface de recherche d'√©tablissements OSM avec un tri corrig√©.
    """
    st.subheader("1. Recherche d'√©tablissements")
    noms_etablissements_osm = st.text_input(
        "Noms d'√©tablissements (s√©par√©s par des virgules)",
        placeholder="Ex: Carrefour, Lidl",
        value=st.session_state.get("noms_etablissements_osm", "")
    )
    noms_etablissements = [nom.strip() for nom in noms_etablissements_osm.split(",") if nom.strip()]

    st.markdown("Zone de recherche")
    maille_recherche = st.radio(
        "Choisir la maille :", ('R√©gion', 'D√©partement', 'Commune'),
        horizontal=True, key="maille_osm"
    )
    selection_geo = []

    if maille_recherche == 'R√©gion':
        regions_disponibles = sorted(df_geo['Nom_Region'].unique())
        selection_geo = st.multiselect("Choisissez une ou plusieurs r√©gions", regions_disponibles)

    elif maille_recherche == 'D√©partement':
        df_deps = df_geo[['Num_Dep', 'Nom_Dep']].drop_duplicates().sort_values('Num_Dep')
        df_deps['label'] = df_deps['Num_Dep'].astype(str).str.zfill(2) + " - " + df_deps['Nom_Dep']
        options_deps = df_deps['label'].tolist()
        selection_labels = st.multiselect("Choisissez un ou plusieurs d√©partements", options_deps)
        selection_geo = df_deps[df_deps['label'].isin(selection_labels)]['Nom_Dep'].tolist()

    elif maille_recherche == 'Commune':
        df_deps = df_geo[['Num_Dep', 'Nom_Dep']].drop_duplicates().sort_values('Num_Dep')
        df_deps['label'] = df_deps['Num_Dep'].astype(str).str.zfill(2) + " - " + df_deps['Nom_Dep']
        options_deps = df_deps['label'].tolist()
        dep_pour_communes_labels = st.multiselect("D'abord, s√©lectionnez un ou plusieurs d√©partements", options_deps)
        if dep_pour_communes_labels:
            deps_selectionnes = df_deps[df_deps['label'].isin(dep_pour_communes_labels)]['Nom_Dep'].tolist()
            communes_disponibles = sorted(df_geo[df_geo['Nom_Dep'].isin(deps_selectionnes)]['Nom_Ville'].unique())
            selection_geo = st.multiselect("Puis, choisissez une ou plusieurs communes", communes_disponibles)

    if st.button("Lancer la recherche", key="recherche_osm_nouveau", type="primary"):
        st.session_state["noms_etablissements_osm"] = noms_etablissements_osm
        villes_a_chercher = []
        if selection_geo:
            if maille_recherche == 'R√©gion':
                villes_a_chercher = df_geo[df_geo['Nom_Region'].isin(selection_geo)]['Nom_Ville'].tolist()
            elif maille_recherche == 'D√©partement':
                villes_a_chercher = df_geo[df_geo['Nom_Dep'].isin(selection_geo)]['Nom_Ville'].tolist()
            elif maille_recherche == 'Commune':
                villes_a_chercher = selection_geo
        if noms_etablissements and villes_a_chercher:
            with st.spinner(f"Recherche en cours..."):
                df_resultats = recherche_etablissements_osm(noms_etablissements, villes_a_chercher)
            st.session_state["df_etablissements_osm"] = df_resultats if df_resultats is not None else pd.DataFrame()
        else:
            st.warning("Veuillez entrer un nom d‚Äô√©tablissement ET s√©lectionner une zone.")

    return st.session_state.get("df_etablissements_osm", pd.DataFrame())


def interface_selection_socio(dict_geodatas):
    """
    Affiche l'interface de s√©lection socio-√©conomique dans la sidebar
    et retourne les donn√©es d√©j√† filtr√©es par d√©partement.
    """
    gdf_socio_filtre, colonne_a_afficher, nom_indicateur_final, maille_choisie = None, None, None, None

    st.sidebar.subheader("üìä Analyse du Territoire")
    if st.sidebar.toggle("Enrichir avec des donn√©es de territoire"):

        nom_affiche_choisi = st.sidebar.selectbox("Choisissez un indicateur :",
                                                  [v['display'] for v in INDICATEURS_CONFIG.values()])
        config_choisie = next(c for c in INDICATEURS_CONFIG.values() if c['display'] == nom_affiche_choisi)
        colonne_a_afficher, nom_indicateur_final = config_choisie['raw'], config_choisie['display']

        if config_choisie['pct'] is not None:
            type_affichage = st.sidebar.radio("Afficher en :", ("Valeur absolue", "Pourcentage (%)"), horizontal=True)
            if type_affichage == "Pourcentage (%)":
                colonne_a_afficher, nom_indicateur_final = config_choisie['pct'], f"{config_choisie['display']} (%)"

        maille_disponible = ['Commune', 'D√©partement'] if colonne_a_afficher in ['Revenu_median',
                                                                                 'Taux_pauvrete'] else ['IRIS',
                                                                                                        'Commune',
                                                                                                        'D√©partement']
        index_defaut = 0 if len(maille_disponible) == 2 else 1
        maille_choisie = st.sidebar.radio("Niveau d'analyse :", maille_disponible, index=index_defaut, horizontal=True)

        gdf_a_afficher = dict_geodatas[maille_choisie]

        df_deps = dict_geodatas['D√©partement']
        if 'label' not in df_deps.columns:
            df_deps['label'] = df_deps['CODE_DEPT'] + ' - ' + df_deps['NOM_COM']

        deps_selectionnes = st.sidebar.multiselect("Filtrer sur un ou plusieurs d√©partements :",
                                                   options=df_deps['label'])

        if deps_selectionnes:
            codes_deps = [d.split(' - ')[0] for d in deps_selectionnes]
            gdf_socio_filtre = gdf_a_afficher[gdf_a_afficher['CODE_DEPT'].isin(codes_deps)]
        else:
            st.sidebar.info("S√©lectionnez au moins un d√©partement pour afficher les donn√©es sur la carte.")

    return gdf_socio_filtre, colonne_a_afficher, nom_indicateur_final, maille_choisie
